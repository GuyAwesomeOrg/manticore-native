package com.paypal.manticore;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Callable;

import com.eclipsesource.v8.V8Value;
import com.eclipsesource.v8.V8Array;
import com.eclipsesource.v8.V8Object;
import com.eclipsesource.v8.JavaCallback;
import com.eclipsesource.v8.JavaVoidCallback;
import com.paypal.manticore.IManticoreTypeConverter;

/**
 * This single file basically fakes the real SDK and exercises the various ways the native engines
 * interact with Javascript.
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * 
 *  
 */
public class SDKTest extends JsBackedObject {
  //<editor-fold description="Constructors">
  /**
   * Internal constructor from a V8 value. Make sure you copy it if it will be released automatically (i.e. if you didn't make it)
   */
  SDKTest(V8Object jsValue) {
    super(jsValue);
  }

  /**
   * Internal static that allows more specific types to be created by analyzing JS property
   */
  static SDKTest nativeInstanceForObject(V8Object jsValue) {
    if (jsValue == null || jsValue.isUndefined()) {
      return null;
    }

    return new SDKTest(jsValue);
  }

  /**
   * Make the class with a particular stringProperty setting
   */
  public SDKTest(final String stringProperty) {
    super();
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().createJsArray()
            .push(stringProperty);
        SDKTest.this.impl = getEngine().createJsObject("SDKTest", args);
      }
    });
  }
  
  //</editor-fold>

  //<editor-fold description="Property getters and setters">
  /**
   * Starts out as 1.
   */
  public Integer getItsOne() {
    return getEngine().getExecutor().run(new Callable<Integer>() {
      @Override public Integer call() {
        int _jsType = SDKTest.this.impl.getType("itsOne");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return 0;
        }
        Integer _itsOne = SDKTest.this.impl.getInteger("itsOne");
        return _itsOne;
      }
    });
  }

  /**
   * Starts out as 1.
   */
  public void setItsOne(final Integer value) {
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.add("itsOne", value);
      }
    });
  }

  /**
   * This is @readonly
   */
  public Integer getCantTouchThis() {
    return getEngine().getExecutor().run(new Callable<Integer>() {
      @Override public Integer call() {
        int _jsType = SDKTest.this.impl.getType("cantTouchThis");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return 0;
        }
        Integer _cantTouchThis = SDKTest.this.impl.getInteger("cantTouchThis");
        return _cantTouchThis;
      }
    });
  }

  /**
   * This is a plain old string property
   */
  public String getStringProperty() {
    return getEngine().getExecutor().run(new Callable<String>() {
      @Override public String call() {
        int _jsType = SDKTest.this.impl.getType("stringProperty");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return null;
        }
        String _stringProperty = SDKTest.this.impl.getString("stringProperty");
        return _stringProperty;
      }
    });
  }

  /**
   * This is a plain old string property
   */
  public void setStringProperty(final String value) {
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.add("stringProperty", value);
      }
    });
  }

  /**
   * This property has accessor functions in JS
   */
  public String getAccessorString() {
    return getEngine().getExecutor().run(new Callable<String>() {
      @Override public String call() {
        int _jsType = SDKTest.this.impl.getType("accessorString");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return null;
        }
        String _accessorString = SDKTest.this.impl.getString("accessorString");
        return _accessorString;
      }
    });
  }

  /**
   * This property has accessor functions in JS
   */
  public void setAccessorString(final String value) {
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.add("accessorString", value);
      }
    });
  }

  /**
   * Yep.
   */
  public SDKTestDefault getComplexType() {
    return getEngine().getExecutor().run(new Callable<SDKTestDefault>() {
      @Override public SDKTestDefault call() {
        int _jsType = SDKTest.this.impl.getType("complexType");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return null;
        }
        V8Object _complexType = SDKTest.this.impl.getObject("complexType");
        return getEngine().getConverter().asNative(_complexType, SDKTestDefault.class);
      }
    });
  }

  /**
   * Yep.
   */
  public void setComplexType(final SDKTestDefault value) {
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.add("complexType", getEngine().getConverter().asJs(value));
      }
    });
  }

  /**
   * fake enum for status.
   */
  public SDKTestStatuses getMyStatus() {
    return getEngine().getExecutor().run(new Callable<SDKTestStatuses>() {
      @Override public SDKTestStatuses call() {
        int _jsType = SDKTest.this.impl.getType("myStatus");
        if (_jsType == V8Value.UNDEFINED || _jsType == V8Value.NULL) {
          return SDKTestStatuses.fromInt(0);
        }
        int _myStatus = SDKTest.this.impl.getInteger("myStatus");
        return SDKTestStatuses.fromInt((int) _myStatus);
      }
    });
  }

  /**
   * fake enum for status.
   */
  public void setMyStatus(final SDKTestStatuses value) {
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.add("myStatus", value.getValue());
      }
    });
  }


  //</editor-fold>

  //<editor-fold description="Interface declarations for callbacks">
  /**
   * Callback for fetch method
   */
  public interface FetchedCallback {
    void fetched(ManticoreException error, Map<String,? super Object> response);
  }
  /**
   * Callback for echo method
   */
  public interface EchoCallback {
    void echo(ManticoreException error, String arg);
  }
  /**
   * Callback for echo method with return
   */
  public interface EchoReturnCallback {
    String echoReturn();
  }

  //</editor-fold>

  //<editor-fold description="Interface declarations for events">
  /**
   * Simple event
   */
  public interface FakeEventObserver {
    void fakeEvent(SDKTestDefault item);
  }

  //</editor-fold>


  //<editor-fold description="Static Methods">
  /**
   * Returns a new instance of this class
   */
  public static SDKTest staticMethod() {
    return getEngine().getExecutor().run(new Callable<SDKTest>() {
      @Override public SDKTest call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = getEngine().getJSClass("SDKTest");
        V8Object retVal = objectToExecuteOn.executeObjectFunction("staticMethod", args);
        return getEngine().getConverter().asNative(retVal, SDKTest.class);
      }
    });
  }

  //</editor-fold>


  //<editor-fold description="Methods">

  /**
   * Echo the argument via the callback
   */
  public void echo(final String arg, final EchoCallback callback) {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().createJsArray()
          .push(arg)
          .push(wrapJavaFn(callback));
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("echo", args);
        
      }
    });
  }
  /**
   * Echo the argument via return value from a callback
   */
  public void echoReturn(final String arg, final EchoReturnCallback callback) {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().createJsArray()
          .push(arg)
          .push(wrapJavaFn(callback));
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("echoReturn", args);
        
      }
    });
  }
  /**
   * Echo the argument via the callback after setTimeout(10)
   */
  public void echoWithSetTimeout(final String arg, final EchoCallback callback) {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().createJsArray()
          .push(arg)
          .push(wrapJavaFn(callback));
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("echoWithSetTimeout", args);
        
      }
    });
  }
  /**
   * Fire an event
   */
  public void triggerFakeAfterTimeout() {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("triggerFakeAfterTimeout", args);
        
      }
    });
  }
  /**
   * Return a complex object.
   */
  public SDKTestDefault returnAnObject() {
    return getEngine().getExecutor().run(new Callable<SDKTestDefault>() {
      @Override public SDKTestDefault call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Object retVal = objectToExecuteOn.executeObjectFunction("returnAnObject", args);
        return getEngine().getConverter().asNative(retVal, SDKTestDefault.class);
      }
    });
  }
  /**
   * Return a derivative of SDKTestDefault
   */
  public SDKTestDefault returnADerivedObject() {
    return getEngine().getExecutor().run(new Callable<SDKTestDefault>() {
      @Override public SDKTestDefault call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Object retVal = objectToExecuteOn.executeObjectFunction("returnADerivedObject", args);
        return getEngine().getConverter().asNative(retVal, SDKTestDefault.class);
      }
    });
  }
  /**
   * Return one SDKTestDefault and one derived
   */
  public List<SDKTestDefault> returnBaseAndDerived() {
    return getEngine().getExecutor().run(new Callable<List<SDKTestDefault>>() {
      @Override public List<SDKTestDefault> call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Array retVal = objectToExecuteOn.executeArrayFunction("returnBaseAndDerived", args);
        return getEngine().getConverter().toNativeArray(retVal, new IManticoreTypeConverter.NativeElementConverter<SDKTestDefault>() {
        @Override
        public SDKTestDefault convert(Object jsValue) {
            return (SDKTestDefault) getEngine().getConverter().asNative(jsValue, SDKTestDefault.class);
        }
    });
      }
    });
  }
  /**
   * Pre decrement within an indexer --j.
   * Create array c= [a,b], set j=1, set c[--j] = c[j]+add
   * push j to c and return c
   * expected result: c[0] is set to c[0]+add, so, [a+add,b,0]
   */
  public List<Integer> preDecrement(final Integer a, final Integer b, final Integer add) {
    return getEngine().getExecutor().run(new Callable<List<Integer>>() {
      @Override public List<Integer> call() {
        V8Array args = getEngine().createJsArray()
          .push(a)
          .push(b)
          .push(add);
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Array retVal = objectToExecuteOn.executeArrayFunction("preDecrement", args);
        return getEngine().getConverter().toNativeArray(retVal, new IManticoreTypeConverter.NativeElementConverter<Integer>() {
        @Override
        public Integer convert(Object jsValue) {
            return (Integer) jsValue;
        }
    });
      }
    });
  }
  /**
   * Post decrement within an indexer j--.
   * Create array c= [a,b], set j=1, set c[j--] = c[j]+add
   * push j to c and return c
   * expected result: c[1] is set to c[0]+add, so, [a,a+add, 0]
   */
  public List<Integer> postDecrement(final Integer a, final Integer b, final Integer add) {
    return getEngine().getExecutor().run(new Callable<List<Integer>>() {
      @Override public List<Integer> call() {
        V8Array args = getEngine().createJsArray()
          .push(a)
          .push(b)
          .push(add);
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Array retVal = objectToExecuteOn.executeArrayFunction("postDecrement", args);
        return getEngine().getConverter().toNativeArray(retVal, new IManticoreTypeConverter.NativeElementConverter<Integer>() {
        @Override
        public Integer convert(Object jsValue) {
            return (Integer) jsValue;
        }
    });
      }
    });
  }
  /**
   * Return a JS dictionary
   */
  public Map<String,? super Object> returnAMixedType() {
    return getEngine().getExecutor().run(new Callable<Map<String,? super Object>>() {
      @Override public Map<String,? super Object> call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Object retVal = objectToExecuteOn.executeObjectFunction("returnAMixedType", args);
        return getEngine().getConverter().asNativeObject(retVal);
      }
    });
  }
  /**
   * Take a JS dictionary and return it
   */
  public Map<String,? super Object> takeAMixedType(final Map<String,? super Object> stuff) {
    return getEngine().getExecutor().run(new Callable<Map<String,? super Object>>() {
      @Override public Map<String,? super Object> call() {
        V8Array args = getEngine().createJsArray()
          .push(getEngine().getConverter().asJsObject(stuff));
        V8Object objectToExecuteOn = SDKTest.this.impl;
        V8Object retVal = objectToExecuteOn.executeObjectFunction("takeAMixedType", args);
        return getEngine().getConverter().asNativeObject(retVal);
      }
    });
  }
  /**
   * Throw an exception
   */
  public void throwOne() {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("throwOne", args);
        
      }
    });
  }
  /**
   * Fetch some JSON from httpbin.org
   */
  public void goFetch(final FetchedCallback callback) {
    getEngine().getExecutor().run(new Runnable() {
      @Override public void run() {
        V8Array args = getEngine().createJsArray()
          .push(wrapJavaFn(callback));
        V8Object objectToExecuteOn = SDKTest.this.impl;
        objectToExecuteOn.executeVoidFunction("goFetch", args);
        
      }
    });
  }

  /**
   * Returns a string representing the serialized state of the SDKTest object
   */
  public String toString() {
    return getEngine().getExecutor().run(new Callable<String>() {
      @Override public String call() {
        V8Object objectToExecuteOn = getEngine().getJsObject("JSON");
        V8Object objectStringify = SDKTest.this.impl;
        V8Array args = getEngine().createJsArray().push(objectStringify);
        String retVal = objectToExecuteOn.executeStringFunction("stringify", args);
        return retVal;
      }
    });
  }

  //</editor-fold>



  //<editor-fold description="Event subscribe/unsubscribe">
  /**
   * Add an observer for the fakeEvent event
   */
  public void addFakeEventObserver(final FakeEventObserver observer) {
    if (fakeEventHandlers == null) {
      fakeEventHandlers = new HashMap<FakeEventObserver,V8Object>();
    } else if (fakeEventHandlers.containsKey(observer)) {
      throw new IllegalArgumentException("That observer has already been added to the fakeEvent event.");
    }
    final V8Object wrapped = wrapJavaFn(observer);
    getEngine().getExecutor().run(new Runnable()
    {
      @Override public void run() {
        SDKTest.this.impl.executeVoidFunction("on", getEngine().createJsArray().push("fakeEvent").push(wrapped));
      }
    });
    fakeEventHandlers.put(observer,wrapped);
  }

  /**
   * Remove an observer for the fakeEvent event
   */
  public void removeFakeEventObserver(FakeEventObserver observer) {
     if (fakeEventHandlers != null && fakeEventHandlers.containsKey(observer)) {
       final V8Object ex = fakeEventHandlers.get(observer);
       getEngine().getExecutor().run(new Runnable()
       {
         @Override public void run() {
           SDKTest.this.impl.executeVoidFunction("removeListener", getEngine().createJsArray().push("fakeEvent").push(ex));
           ex.release();
         }
       });
       fakeEventHandlers.remove(observer);
     }
  }

  //</editor-fold>


  //<editor-fold description="Internal callback wrappers" defaultstate="collapsed">
  /**
   * Generate the javascript function for a callback or event
   */
  private static V8Object wrapJavaFn(final FetchedCallback javaInterface) {
    return getEngine().getExecutor().run(new Callable<V8Object>() {
      @Override public V8Object call() throws Exception {
        V8Object _ = getEngine().createJsObject();
        _.registerJavaMethod(new JavaVoidCallback() {
          @Override
          public void invoke(V8Object jsThis, V8Array args)
          {
            V8Object jserror = null;
            ManticoreException _error = null;
            if (args.length() > 0 && args.getType(0) != V8Value.UNDEFINED) {
              jserror = args.getObject(0);
              _error = getEngine().getConverter().asNative(jserror, ManticoreException.class);
            }

            V8Object jsresponse = null;
            Map<String,? super Object> _response = null;
            if (args.length() > 1 && args.getType(1) != V8Value.UNDEFINED) {
              jsresponse = args.getObject(1);
              _response = getEngine().getConverter().asNativeObject(jsresponse);
            }

            
            javaInterface.fetched(_error, _response);
            
          }
        }, "_");
        V8Object fn = _.getObject("_");
        _.release();
        return fn;
      }
    });
  }
  /**
   * Generate the javascript function for a callback or event
   */
  private static V8Object wrapJavaFn(final EchoCallback javaInterface) {
    return getEngine().getExecutor().run(new Callable<V8Object>() {
      @Override public V8Object call() throws Exception {
        V8Object _ = getEngine().createJsObject();
        _.registerJavaMethod(new JavaVoidCallback() {
          @Override
          public void invoke(V8Object jsThis, V8Array args)
          {
            V8Object jserror = null;
            ManticoreException _error = null;
            if (args.length() > 0 && args.getType(0) != V8Value.UNDEFINED) {
              jserror = args.getObject(0);
              _error = getEngine().getConverter().asNative(jserror, ManticoreException.class);
            }

            String jsarg = null;
            String _arg = null;
            if (args.length() > 1 && args.getType(1) != V8Value.UNDEFINED) {
              jsarg = args.getString(1);
              _arg = jsarg;
            }

            
            javaInterface.echo(_error, _arg);
            
          }
        }, "_");
        V8Object fn = _.getObject("_");
        _.release();
        return fn;
      }
    });
  }
  /**
   * Generate the javascript function for a callback or event
   */
  private static V8Object wrapJavaFn(final EchoReturnCallback javaInterface) {
    return getEngine().getExecutor().run(new Callable<V8Object>() {
      @Override public V8Object call() throws Exception {
        V8Object _ = getEngine().createJsObject();
        _.registerJavaMethod(new JavaCallback() {
          @Override
          public String invoke(V8Object jsThis, V8Array args)
          {
            
            String retVal = javaInterface.echoReturn();
            return retVal;
          }
        }, "_");
        V8Object fn = _.getObject("_");
        _.release();
        return fn;
      }
    });
  }

  //</editor-fold>

  //<editor-fold description="Internal event wrappers" defaultstate="collapsed">

  private Map<FakeEventObserver,V8Object> fakeEventHandlers;

    /**
   * Generate the javascript function for a callback or event
   */
  private static V8Object wrapJavaFn(final FakeEventObserver javaInterface) {
    return getEngine().getExecutor().run(new Callable<V8Object>() {
      @Override public V8Object call() throws Exception {
        V8Object _ = getEngine().createJsObject();
        _.registerJavaMethod(new JavaVoidCallback() {
          @Override
          public void invoke(V8Object jsThis, V8Array args)
          {
            V8Object jsitem = null;
            SDKTestDefault _item = null;
            if (args.length() > 0 && args.getType(0) != V8Value.UNDEFINED) {
              jsitem = args.getObject(0);
              _item = getEngine().getConverter().asNative(jsitem, SDKTestDefault.class);
            }

            
            javaInterface.fakeEvent(_item);
            
          }
        }, "_");
        V8Object fn = _.getObject("_");
        _.release();
        return fn;
      }
    });
  }

  //</editor-fold>

}
