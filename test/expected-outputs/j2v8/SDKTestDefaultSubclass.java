package com.paypal.manticore;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Callable;

import com.eclipsesource.v8.V8Value;
import com.eclipsesource.v8.V8Array;
import com.eclipsesource.v8.V8Object;
import com.eclipsesource.v8.JavaCallback;
import com.eclipsesource.v8.JavaVoidCallback;
import com.paypal.manticore.IManticoreTypeConverter;

/**
 * 
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: /Users/mmetral/dev/opensource/paypal-manticore/test/js-source/SDKTestDefault.js
 *  
 */
public class SDKTestDefaultSubclass extends SDKTestDefault {
  //<editor-fold description="Constructors">
  /**
   * Internal constructor from a V8 value. Make sure you copy it if it will be released automatically (i.e. if you didn't make it)
   */
  SDKTestDefaultSubclass(V8Object jsValue) {
    super(jsValue);
  }

  /**
   * Internal static that allows more specific types to be created by analyzing JS property
   */
  static SDKTestDefaultSubclass nativeInstanceForObject(V8Object jsValue) {
    if (jsValue == null || jsValue.isUndefined()) {
      return null;
    }

    return new SDKTestDefaultSubclass(jsValue);
  }

  public SDKTestDefaultSubclass() {
    super();
    getEngine().getExecutor().run(new Runnable() {
        @Override public void run() {
            SDKTestDefaultSubclass.this.impl = getEngine().createJsObject("SDKTestDefaultSubclass", null);
        }
    });
  }
  //</editor-fold>




  //<editor-fold description="Static Methods">
  /**
   * Test derived classes
   */
  public static SDKTestDefault getDerived() {
    return getEngine().getExecutor().run(new Callable<SDKTestDefault>() {
      @Override public SDKTestDefault call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = getEngine().getJSClass("SDKTestDefaultSubclass");
        V8Object retVal = objectToExecuteOn.executeObjectFunction("getDerived", args);
        return getEngine().getConverter().asNative(retVal, SDKTestDefault.class);
      }
    });
  }

  //</editor-fold>


  //<editor-fold description="Methods">

  /**
   * Test subclass
   */
  public Boolean isItDerived() {
    return getEngine().getExecutor().run(new Callable<Boolean>() {
      @Override public Boolean call() {
        V8Array args = getEngine().getEmptyArray();
        V8Object objectToExecuteOn = SDKTestDefaultSubclass.this.impl;
        Boolean retVal = objectToExecuteOn.executeBooleanFunction("isItDerived", args);
        return retVal;
      }
    });
  }

  /**
   * Returns a string representing the serialized state of the SDKTestDefaultSubclass object
   */
  public String toString() {
    return getEngine().getExecutor().run(new Callable<String>() {
      @Override public String call() {
        V8Object objectToExecuteOn = getEngine().getJsObject("JSON");
        V8Object objectStringify = SDKTestDefaultSubclass.this.impl;
        V8Array args = getEngine().createJsArray().push(objectStringify);
        String retVal = objectToExecuteOn.executeStringFunction("stringify", args);
        return retVal;
      }
    });
  }

  //</editor-fold>





}
