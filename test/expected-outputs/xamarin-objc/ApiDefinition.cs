using System;
using Foundation;
using ObjCRuntime;

/**
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 */
namespace Manticore
{

  

  [BaseType (typeof(NSError))]
  interface PPManticoreError
  {
  }



  /**
   * This single file basically fakes the real SDK and exercises the various ways the native engines
   * interact with Javascript.
   */
  [BaseType (typeof(NSObject), Name="SDKTest")]
  interface SDKTest
  {
    /**
     * Make the class with a particular stringProperty setting
     */
    [Export("initWithStringProperty:")]
    IntPtr Constructor(string stringProperty);


    /**
     * Starts out as 1.
     */
    [Export ("itsOne")]
    int ItsOne { get; set; }

    /**
     * This is @readonly
     */
    [Export ("cantTouchThis")]
    int CantTouchThis { get;  }

    /**
     * This is a plain old string property
     */
    [Export ("stringProperty", ArgumentSemantic.Strong)]
    string StringProperty { get; set; }

    /**
     * This property has accessor functions in JS
     */
    [Export ("accessorString", ArgumentSemantic.Strong)]
    string AccessorString { get; set; }

    /**
     * Yep.
     */
    [Export ("complexType", ArgumentSemantic.Strong)]
    SDKTestDefault ComplexType { get; set; }

    /**
     * fake enum for status.
     */
    [Export ("myStatus")]
    SDKTestStatuses MyStatus { get; set; }

    /**
     * Echo the argument via the callback
     */
    [Export ("echo:callback:")]
    void Echo(string arg, SDKTestEchoHandler callback);

    /**
     * Echo the argument via return value from a callback
     */
    [Export ("echoReturn:callback:")]
    void EchoReturn(string arg, SDKTestEchoReturnHandler callback);

    /**
     * Echo the argument via the callback after setTimeout(10)
     */
    [Export ("echoWithSetTimeout:callback:")]
    void EchoWithSetTimeout(string arg, SDKTestEchoHandler callback);

    /**
     * Fire an event
     */
    [Export ("triggerFakeAfterTimeout")]
    void TriggerFakeAfterTimeout();

    /**
     * Return a complex object.
     */
    [Export ("returnAnObject")]
    SDKTestDefault ReturnAnObject();

    /**
     * Return a derivative of SDKTestDefault
     */
    [Export ("returnADerivedObject")]
    SDKTestDefault ReturnADerivedObject();

    /**
     * Return one SDKTestDefault and one derived
     */
    [Export ("returnBaseAndDerived")]
    SDKTestDefault[] ReturnBaseAndDerived();

    /**
     * Pre decrement within an indexer --j.
     * Create array c= [a,b], set j=1, set c[--j] = c[j]+add
     * push j to c and return c
     * expected result: c[0] is set to c[0]+add, so, [a+add,b,0]
     */
    [Export ("preDecrement:b:add:")]
    int[] PreDecrement(int a, int b, int add);

    /**
     * Post decrement within an indexer j--.
     * Create array c= [a,b], set j=1, set c[j--] = c[j]+add
     * push j to c and return c
     * expected result: c[1] is set to c[0]+add, so, [a,a+add, 0]
     */
    [Export ("postDecrement:b:add:")]
    int[] PostDecrement(int a, int b, int add);

    /**
     * Return a JS dictionary
     */
    [Export ("returnAMixedType")]
    NSDictionary ReturnAMixedType();

    /**
     * Take a JS dictionary and return it
     */
    [Export ("takeAMixedType:")]
    NSDictionary TakeAMixedType(NSDictionary stuff);

    /**
     * Throw an exception
     */
    [Export ("throwOne")]
    void ThrowOne();

    /**
     * Fetch some JSON from httpbin.org
     */
    [Export ("goFetch:")]
    void GoFetch(SDKTestFetchedHandler callback);


    /**
     * Add a listener for the fakeEvent event
     * @returns FakeEventSignal an object that can be used to remove the listener when you're done with it
     */
    [Export ("addFakeEventListener:")]
    SDKTestFakeEventSignal AddFakeEventListener(SDKTestFakeEventEvent listener);

    /**
     * Remove a listener for the fakeEvent event given the signal object that was returned from addFakeEventListener
     */
    [Export ("removeFakeEventListener:")]
    void RemoveFakeEventListener(SDKTestFakeEventSignal listenerToken);

  }

  /**
   * Simple event
   */
  delegate void SDKTestFakeEventEvent (SDKTestDefault item);

  /**
   * Returned from FakeEventListener and used to unsubscribe from the event.
   */
  [BaseType(typeof(NSObject), Name="PayPalRetailObject")] interface SDKTestFakeEventSignal { }


  /**
   * 
   */
  [BaseType (typeof(NSObject), Name="SDKTestDefault")]
  interface SDKTestDefault
  {


    /**
     * It's 1
     */
    [Export ("test")]
    int Test { get; set; }

    /**
     * It's true
     */
    [Export ("itsTrue")]
    bool ItsTrue { get; set; }

    /**
     * It's false
     */
    [Export ("itsFalse")]
    bool ItsFalse { get; set; }

    /**
     * Starts blank
     */
    [Export ("blankInt")]
    int BlankInt { get; set; }

    /**
     * Starts 1
     */
    [Export ("intOne")]
    int IntOne { get; set; }

    /**
     * Starts blank
     */
    [Export ("blankDecimal", ArgumentSemantic.Strong)]
    NSDecimalNumber BlankDecimal { get; set; }

    /**
     * Starts 100.01
     */
    [Export ("decimalHundredOhOne", ArgumentSemantic.Strong)]
    NSDecimalNumber DecimalHundredOhOne { get; set; }

    /**
     * It's a null string.
     */
    [Export ("nullString", ArgumentSemantic.Strong)]
    string NullString { get; set; }

    /**
     * It's now
     */
    [Export ("now", ArgumentSemantic.Strong)]
    NSDate Now { get; set; }

    /**
     * An array of a, b, c
     */
    [Export ("stringArray", ArgumentSemantic.Strong)]
    string[] StringArray { get; set; }

    /**
     * Test closure
     */
    [Export ("isItTrue")]
    bool IsItTrue();


  }


  /**
   * 
   */
  [BaseType (typeof(SDKTestDefault), Name="SDKTestDefaultSubclass")]
  interface SDKTestDefaultSubclass
  {


    /**
     * Test subclass
     */
    [Export ("isItDerived")]
    bool IsItDerived();


  }


}
