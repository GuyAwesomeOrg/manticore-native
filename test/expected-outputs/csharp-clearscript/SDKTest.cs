using System;
using System.Collections.Generic;
using Manticore;

/**
 * SDKTest.cs
 * This single file basically fakes the real SDK and exercises the various ways the native engines
 * interact with Javascript.
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: /Users/mmetral/dev/opensource/paypal-manticore/test/js-source/SDKTest.js
 *
 * 
 */
namespace Manticore
{
  public class SDKTest : JsBackedObject {

    /**
     * Callback for fetch method
     */
    public delegate void FetchedDelegate(ManticoreException error, IDictionary<String,Object> response);

    /**
     * Callback for echo method
     */
    public delegate void EchoDelegate(ManticoreException error, String arg);

    /**
     * Callback for echo method with return
     */
    public delegate String EchoReturnDelegate();

    /**
     * Simple event
     */
    public delegate void FakeEventDelegate(SDKTest sender, SDKTestDefault item);
    private System.Collections.Generic.Dictionary<FakeEventDelegate,object> fakeEventHandlers;

      internal static SDKTest NativeInstanceForObject(dynamic value) {
      if (Engine.IsNullOrUndefined(value)) {
        return null;
      }
      
      return new SDKTest(new JsValueHolder(value));
    }

    internal SDKTest(object value) : base(value) {
    }

    /**
     * Make the class with a particular stringProperty setting
     */
    public SDKTest(String stringProperty) {
      dynamic args = Engine.ManticoreJsObject._.array();
      args.push(Engine.Converter.AsJsString(stringProperty));

      this.impl = Engine.CreateJsObject("SDKTest", args);
    }

    /**
     * Make subclasses work with classes with non-default constructors
     */
    protected SDKTest() {}

        /**
         * Echo the argument via the callback
         */
        public  void Echo(String arg, EchoDelegate callback) {
            Engine.Js(() => {  this.impl.echo(Engine.Converter.AsJsString(arg),
            WrapDelegate(callback));
            });
        }        /**
         * Echo the argument via return value from a callback
         */
        public  void EchoReturn(String arg, EchoReturnDelegate callback) {
            Engine.Js(() => {  this.impl.echoReturn(Engine.Converter.AsJsString(arg),
            WrapDelegate(callback));
            });
        }        /**
         * Echo the argument via the callback after setTimeout(10)
         */
        public  void EchoWithSetTimeout(String arg, EchoDelegate callback) {
            Engine.Js(() => {  this.impl.echoWithSetTimeout(Engine.Converter.AsJsString(arg),
            WrapDelegate(callback));
            });
        }        /**
         * Fire an event
         */
        public  void TriggerFakeAfterTimeout() {
            Engine.Js(() => {  this.impl.triggerFakeAfterTimeout();
            });
        }        /**
         * Return a complex object.
         */
        public  SDKTestDefault ReturnAnObject() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.returnAnObject();
              return (Engine.IsNullOrUndefined(returnValue) ? null : SDKTestDefault.NativeInstanceForObject(returnValue));
            });
        }        /**
         * Return a derivative of SDKTestDefault
         */
        public  SDKTestDefault ReturnADerivedObject() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.returnADerivedObject();
              return (Engine.IsNullOrUndefined(returnValue) ? null : SDKTestDefault.NativeInstanceForObject(returnValue));
            });
        }        /**
         * Return one SDKTestDefault and one derived
         */
        public  List<SDKTestDefault> ReturnBaseAndDerived() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.returnBaseAndDerived();
              return Engine.Converter.ToNativeArray((object)returnValue, (element) => (Engine.IsNullOrUndefined(element) ? null : SDKTestDefault.NativeInstanceForObject(element)));
            });
        }        /**
         * Pre decrement within an indexer --j.
         * Create array c= [a,b], set j=1, set c[--j] = c[j]+add
         * push j to c and return c
         * expected result: c[0] is set to c[0]+add, so, [a+add,b,0]
         */
        public  List<int> PreDecrement(int a, int b, int add) {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.preDecrement(Engine.Converter.AsJsInt(a),
            Engine.Converter.AsJsInt(b),
            Engine.Converter.AsJsInt(add));
              return Engine.Converter.ToNativeArray((object)returnValue, (element) => Engine.Converter.AsNativeInt(element));
            });
        }        /**
         * Post decrement within an indexer j--.
         * Create array c= [a,b], set j=1, set c[j--] = c[j]+add
         * push j to c and return c
         * expected result: c[1] is set to c[0]+add, so, [a,a+add, 0]
         */
        public  List<int> PostDecrement(int a, int b, int add) {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.postDecrement(Engine.Converter.AsJsInt(a),
            Engine.Converter.AsJsInt(b),
            Engine.Converter.AsJsInt(add));
              return Engine.Converter.ToNativeArray((object)returnValue, (element) => Engine.Converter.AsNativeInt(element));
            });
        }        /**
         * Return a JS dictionary
         */
        public  IDictionary<String,Object> ReturnAMixedType() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.returnAMixedType();
              return Engine.Converter.AsNativeObject(returnValue);
            });
        }        /**
         * Take a JS dictionary and return it
         */
        public  IDictionary<String,Object> TakeAMixedType(IDictionary<String,Object> stuff) {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.takeAMixedType(Engine.Converter.AsJsObject(stuff));
              return Engine.Converter.AsNativeObject(returnValue);
            });
        }        /**
         * Throw an exception
         */
        public  void ThrowOne() {
            Engine.Js(() => {  this.impl.throwOne();
            });
        }        /**
         * Fetch some JSON from httpbin.org
         */
        public  void GoFetch(FetchedDelegate callback) {
            Engine.Js(() => {  this.impl.goFetch(WrapDelegate(callback));
            });
        }
        /**
         * Returns a new instance of this class
         */
        public static SDKTest StaticMethod() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  Engine.GetJsClass("SDKTest").staticMethod();
              return (Engine.IsNullOrUndefined(returnValue) ? null : SDKTest.NativeInstanceForObject(returnValue));
            });
        }

        /**
         * Starts out as 1.
         */
        public int ItsOne {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeInt(this.impl.itsOne));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsInt(value);
                    this.impl.itsOne = impl;
                });
           }
    
        }

        /**
         * This is @readonly
         */
        public int CantTouchThis {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeInt(this.impl.cantTouchThis));
            }
    
        }

        /**
         * This is a plain old string property
         */
        public String StringProperty {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeString(this.impl.stringProperty));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsString(value);
                    this.impl.stringProperty = impl;
                });
           }
    
        }

        /**
         * This property has accessor functions in JS
         */
        public String AccessorString {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeString(this.impl.accessorString));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsString(value);
                    this.impl.accessorString = impl;
                });
           }
    
        }

        /**
         * Yep.
         */
        public SDKTestDefault ComplexType {
            get {
                return Engine.JsWithReturn(() => (Engine.IsNullOrUndefined(this.impl.complexType) ? null : SDKTestDefault.NativeInstanceForObject(this.impl.complexType)));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJs(value);
                    this.impl.complexType = impl;
                });
           }
    
        }

        /**
         * fake enum for status.
         */
        public SDKTestStatuses MyStatus {
            get {
                return Engine.JsWithReturn(() => (SDKTestStatuses) Engine.Converter.AsNativeInt(this.impl.myStatus));
            }
    
            set {
                Engine.Js(() => {
                    var impl = (int)value;
                    this.impl.myStatus = impl;
                });
           }
    
        }


        private Action<dynamic,dynamic> WrapDelegate(FetchedDelegate _delegate) {
            return new Action<dynamic,dynamic>((error, response) => {
                _delegate((Engine.IsNullOrUndefined(error) ? null : ManticoreException.NativeInstanceForObject(error)), Engine.Converter.AsNativeObject(response));
                
            });
        }

        private Action<dynamic,dynamic> WrapDelegate(EchoDelegate _delegate) {
            return new Action<dynamic,dynamic>((error, arg) => {
                _delegate((Engine.IsNullOrUndefined(error) ? null : ManticoreException.NativeInstanceForObject(error)), Engine.Converter.AsNativeString(arg));
                
            });
        }

        private Func<string> WrapDelegate(EchoReturnDelegate _delegate) {
            return new Func<string>(() => {
                var returnValue = _delegate();
                return Engine.Converter.AsNativeString(returnValue);
            });
        }

        public event FakeEventDelegate FakeEvent
        {
            add
            {
                var _wrapped = Engine.ManticoreJsObject._.fn(WrapDelegate(value), 1+1);
                if (fakeEventHandlers == null) {
                    fakeEventHandlers = new System.Collections.Generic.Dictionary<FakeEventDelegate,object>();
                }
                this.impl.on("fakeEvent",_wrapped);
                fakeEventHandlers[value] = _wrapped;
            }
            remove
            {
                if (fakeEventHandlers != null) {
                    var _wrapped = fakeEventHandlers[value];
                    if (_wrapped != null) {
                        this.impl.removeListener("fakeEvent",_wrapped);
                        fakeEventHandlers.Remove(value);
                    }
                }
            }
        }

        private Action<dynamic> WrapDelegate(FakeEventDelegate _delegate) {
            return new Action<dynamic>((item) => {
                _delegate(this, (Engine.IsNullOrUndefined(item) ? null : SDKTestDefault.NativeInstanceForObject(item)));
                
            });
        }

    }
}
