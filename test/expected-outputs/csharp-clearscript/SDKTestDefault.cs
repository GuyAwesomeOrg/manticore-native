using System;
using System.Collections.Generic;
using Manticore;

/**
 * SDKTestDefault.cs
 * 
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: test/js-source/SDKTestDefault.js
 *
 * 
 */
namespace Manticore
{
  public class SDKTestDefault : JsBackedObject {

      internal static SDKTestDefault NativeInstanceForObject(dynamic value) {
      if (Engine.IsNullOrUndefined(value)) {
        return null;
      }
      var nativeClass = value["_native"];
      if (Engine.IsNullOrUndefined(nativeClass)) {
        return new SDKTestDefault(new JsValueHolder(value));
      }
      var strNativeClass = nativeClass.ToString();
      
      if ("SDKTestDefaultSubclass".Equals(strNativeClass)) {
        return new SDKTestDefaultSubclass(new JsValueHolder(value));
      }
      return new SDKTestDefault(new JsValueHolder(value));
    }

    internal SDKTestDefault(object value) : base(value) {
    }

    public SDKTestDefault() {
      this.impl = Engine.CreateJsObject("SDKTestDefault", null);
    }

        /**
         * Test closure
         */
        public  bool IsItTrue() {
            return Engine.JsWithReturn(() => {
              dynamic returnValue =  this.impl.isItTrue();
              return Engine.Converter.AsNativeBool(returnValue);
            });
        }


        /**
         * It's 1
         */
        public int Test {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeInt(this.impl.test));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsInt(value);
                    this.impl.test = impl;
                });
           }
    
        }

        /**
         * It's true
         */
        public bool ItsTrue {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeBool(this.impl.itsTrue));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsBool(value);
                    this.impl.itsTrue = impl;
                });
           }
    
        }

        /**
         * It's false
         */
        public bool ItsFalse {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeBool(this.impl.itsFalse));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsBool(value);
                    this.impl.itsFalse = impl;
                });
           }
    
        }

        /**
         * Starts blank
         */
        public int BlankInt {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeInt(this.impl.blankInt));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsInt(value);
                    this.impl.blankInt = impl;
                });
           }
    
        }

        /**
         * Starts 1
         */
        public int IntOne {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeInt(this.impl.intOne));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsInt(value);
                    this.impl.intOne = impl;
                });
           }
    
        }

        /**
         * Starts blank
         */
        public Decimal? BlankDecimal {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeDecimal(this.impl.blankDecimal));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsDecimal(value);
                    this.impl.blankDecimal = impl;
                });
           }
    
        }

        /**
         * Starts 100.01
         */
        public Decimal? DecimalHundredOhOne {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeDecimal(this.impl.decimalHundredOhOne));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsDecimal(value);
                    this.impl.decimalHundredOhOne = impl;
                });
           }
    
        }

        /**
         * It's a null string.
         */
        public String NullString {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeString(this.impl.nullString));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsString(value);
                    this.impl.nullString = impl;
                });
           }
    
        }

        /**
         * It's now
         */
        public DateTime Now {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.AsNativeDateTime(this.impl.now));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.AsJsDate(value);
                    this.impl.now = impl;
                });
           }
    
        }

        /**
         * An array of a, b, c
         */
        public List<String> StringArray {
            get {
                return Engine.JsWithReturn(() => Engine.Converter.ToNativeArray((object)this.impl.stringArray, (element) => Engine.Converter.AsNativeString(element)));
            }
    
            set {
                Engine.Js(() => {
                    var impl = Engine.Converter.ToJsArray(value, (element) => Engine.Converter.AsJsString(element));
                    this.impl.stringArray = impl;
                });
           }
    
        }


    }
}
