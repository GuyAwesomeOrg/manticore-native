  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  public{?static} static{/static} {?async}void{:else}{^returns}void{:else}{@type}{returns.type}{/type}{/returns}{/async} {name}({#args}final {@type}{type}{/type} {name}{@sep}, {/sep}{/args}{@comment}
    ***** async gets an extra argument tossed onto it
  {/comment}{?async}{?args}, {/args}final {@firstCap}{name}{/firstCap}Callback callback{/async}) {
  {^async}{?returns}return {/returns}{/async}getEngine().getExecutor().run({@comment}

  {/comment}new {?async}Runnable{:else}{?returns}Callable<{@type}{returns.type}{/type}>{:else}Runnable{/returns}{/async}() {~lb}
      @Override public {?async}void run() {{:else}{?returns}{@type}{returns.type}{/type} call() {{:else}void run() {{/returns}{/async}
        V8Array args = {?args}getEngine().createJsArray(){#args}
          .push({>toJs target="{type}" arg="{name}"/}){/args}{:else}getEngine().getEmptyArray(){/args};
        V8Object objectToExecuteOn = {?static}getEngine().getJSClass("{packedName}"){:else}{packedName}.this.impl{/static};
        {?async}V8Object promise = {:else}{?returns}{>fnReturnType target="{returns.type}"/} retVal = {/returns}{/async}objectToExecuteOn.execute{?returns}{>fnType target="{returns.type}"/}{:else}Void{/returns}Function("{name}", args);
        {?async}getEngine().resolvePromise(promise, wrapPromise(callback));{:else}{@comment}
        {/comment}{?returns}return {>toNative target="{returns.type}" arg="retVal"/};{/returns}{/async}
      }
    });
  }
