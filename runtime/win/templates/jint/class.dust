using Jint;
using Jint.Native;
using Jint.Native.Object;
using Jint.Native.Function;
using Jint.Runtime.Interop;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Manticore;

/**
 * {packedName}.cs
 * {@lineify}{description|s}{/lineify}
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * {@sourceDocument/}
{^copyright} *
* {copyright}
{/copyright} */
namespace {namespace}
{
  public class {packedName} : {?inherits}{inherits}{:else}{baseClass}{/inherits} {
{#callbacks}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  public delegate {^returns}void{:else}{@type}{returns.type}{/type}{/returns} {@firstCap}{name}{/firstCap}Delegate({>argList/});
{/callbacks}{#events}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  public delegate {^returns}void{:else}{@type}{returns.type}{/type}{/returns} {@firstCap}{name}{/firstCap}Delegate({packedName} sender{?args}, {/args}{>argList/});
  private System.Collections.Generic.Dictionary<{@firstCap}{name}{/firstCap}Delegate,ClrFunctionInstance> {name}Handlers;
{/events}

  internal {packedName}(ObjectInstance value) : base(value) {
  }

{#instanceConstructor}{^private}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  public {packedName}({#args}{@type}{type}{/type} {name}{@sep}, {/sep}{/args}) {
    JsValue[] args = new JsValue[] {
      {#args}{>toJs target="{type}" arg="{name}"/}{@sep},
      {/sep}{/args}
    };
    this.impl = Engine.CreateJsObject("{name}", args);
  }
{/private}
  {?args}/**
  * Make subclasses work with classes with non-default constructors
  */
  protected {packedName}() {}{/args}
{:else}
  public {packedName}() {
    this.impl = Engine.CreateJsObject("{name}", ManticoreEngine.EmptyArgs);
  }
{/instanceConstructor}

  {?inherits}new {/inherits}internal static {packedName} NativeInstanceForObject(ObjectInstance value) {
    if (value == null) {
      return null;
    }
{?subclasses}
    var nativeClass = value.Get("_native");
    if (!nativeClass.IsString()) {
      return new {packedName}(value);
    }
    var strNativeClass = nativeClass.AsString();
{#subclasses}
    if ("{name}".Equals(strNativeClass)) {
      return new {name}(value);
    }
{/subclasses}{/subclasses}
    return new {packedName}(value);
  }
{#methods}{>method/}{/methods}
{#staticMethods className=name}{>method isStatic="true"/}{/staticMethods}

{#fields}
  public {@type}{type}{/type} {@firstCap}{name}{/firstCap} {
    get {
      return Engine.JsWithReturn(() => {
        var {name} = this.impl.Get("{name}");
        return {>toNative target="{type}" arg="{name}"/};
      });
    }
    {^readonly}
    set {
      var jsValue = {>toJs target="{type}" arg="value"/};
      Engine.Js(() => {
        this.impl.Put("{name}", jsValue, true);
      });
    }
    {/readonly}
  }
{/fields}
{#callbacks}
  private ClrFunctionInstance WrapDelegate({@firstCap}{name}{/firstCap}Delegate _delegate) {
    return Engine.AsJsFunction(new Func<JsValue,JsValue[],JsValue>((thisObject, args) => {
      {?returns}var returnValue = {/returns}_delegate({#args}{>toNative target="{type}" arg="args[{$idx}]"/}{@sep}, {/sep}{/args});
      return {?returns}{>toJs target="{returns.type}" arg="returnValue"/}{:else}JsValue.Undefined{/returns};
    }));
  }{/callbacks}
{#events}
  public event {@firstCap}{name}{/firstCap}Delegate {@firstCap}{name}{/firstCap}
  {
    add
    {
      var _wrapped = WrapDelegate(value);
      if ({name}Handlers == null) {
        {name}Handlers = new System.Collections.Generic.Dictionary<{@firstCap}{name}{/firstCap}Delegate,ClrFunctionInstance>();
      }
      this.impl.Get("on").As<FunctionInstance>().Call(this.impl, new JsValue[] {
        "{name}",
        _wrapped
      });
      {name}Handlers[value] = _wrapped;
    }
    remove
    {
      if ({name}Handlers != null) {
        var _wrapped = {name}Handlers[value];
        if (_wrapped != null) {
          this.impl.Get("removeListener").As<FunctionInstance>().Call(this.impl, new JsValue[] {
            "{name}",
            _wrapped
          });
          {name}Handlers.Remove(value);
        }
      }
    }
  }

  private ClrFunctionInstance WrapDelegate({@firstCap}{name}{/firstCap}Delegate _delegate) {
    return Engine.AsJsFunction(new Func<JsValue,JsValue[],JsValue>((thisObject, args) => {
      {?returns}var returnValue = {/returns}_delegate(this{?args}, {/args}{#args}{>toNative target="{type}" arg="args[{$idx}]"/}{@sep}, {/sep}{/args});
      return {?returns}{>toJs target="{returns.type}" arg="returnValue"/}{:else}JsValue.Undefined{/returns};
      }));
    }{/events}
  }
}
