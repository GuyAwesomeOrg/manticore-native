using System;
using Foundation;
using ObjCRuntime;

/**
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 */
namespace {namespace}
{

  {implHeader}

  [BaseType (typeof(NSError))]
  interface {languageSettings.typeMap.error}
  {
  }

{#callbacks}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  delegate {^returns}void{:else}{@type}{returns.type}{/type}{/returns} {type}{@firstCap}{name}{/firstCap}Handler ({#args}{@type}{type}{/type} {name}{@sep}, {/sep}{/args});
{/callbacks}
{#classes}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  [BaseType (typeof({?inherits}{inherits}{:else}NSObject{/inherits}), Name="{prefix}{packedName}")]
  interface {packedName}
  {
{?instanceConstructor}{#instanceConstructor}    {?description}/**
     * {@lineify indent=5}{description|s}{/lineify}
     */
    {/description}{^args}/*
    {/args}[Export("init{?args}With{/args}{#args}{@eq key=$idx value=0}{@firstCap}{name}{/firstCap}{:else}{name}{/eq}:{/args}")]
    IntPtr Constructor({#args}{@type}{type}{/type} {name}{@sep}, {/sep}{/args});
{^args}    */{/args}{/instanceConstructor}{/instanceConstructor}
{#fields}{?description}
    /**
     * {@lineify indent=5}{description|s}{/lineify}
     */{/description}
    [Export ("{name}"{@isStrong type="{type}"}, ArgumentSemantic.Strong{/isStrong})]
    {@type}{type}{/type} {@firstCap}{name}{/firstCap} { get; {^readonly}set;{/readonly} }
{/fields}{#methods}
    /**
     * {@lineify indent=5}{description|s}{/lineify}
     */
    [Export ("{name}{#args}{@eq key=$idx value=0}{:else}{name}{/eq}:{/args}")]
    {?returns}{@type}{returns.type}{/type}{:else}void{/returns} {@firstCap}{name}{/firstCap}({#args}{@type}{type}{/type} {name}{@sep}, {/sep}{/args});
{/methods}
{#events}
    /**
     * Add a listener for the {name} event
     * @returns {prefix}{type}{@firstCap}{name}{/firstCap}Signal an object that can be used to remove the listener when you're done with it
     */
    [Export ("add{@firstCap}{name}{/firstCap}Listener:")]
    {@firstCap}{containingType}{/firstCap}{@firstCap}{name}{/firstCap}Signal Add{@firstCap}{name}{/firstCap}Listener({@firstCap}{containingType}{/firstCap}{@firstCap}{name}{/firstCap}Event listener);

    /**
     * Remove a listener for the {name} event given the signal object that was returned from add{@firstCap}{name}{/firstCap}Listener
     */
    [Export ("remove{@firstCap}{name}{/firstCap}Listener:")]
    void Remove{@firstCap}{name}{/firstCap}Listener({@firstCap}{containingType}{/firstCap}{@firstCap}{name}{/firstCap}Signal listenerToken);
{/events}
  }
{#events}
  /**
   * {@lineify indent=3}{description|s}{/lineify}
   */
  delegate {^returns}void{:else}{@type}{returns.type}{/type}{/returns} {@firstCap}{containingType}{/firstCap}{@firstCap}{name}{/firstCap}Event ({#args}{@type}{type}{/type} {name}{@sep}, {/sep}{/args});

  /**
   * Returned from {@firstCap}{name}{/firstCap}Listener and used to unsubscribe from the event.
   */
  [BaseType(typeof(NSObject), Name="PayPalRetailObject")] interface {@firstCap}{containingType}{/firstCap}{@firstCap}{name}{/firstCap}Signal { }
{/events}
{/classes}
}
